
trigger:
  - master

pool:
  name: MyPool


name: Azure Pipelineeesssss
variables:
  python.version: '3.7.6'
  terraform.version: '1.7.5'
stages:
- stage: Provisioning
  displayName: Provisioning
  jobs: 
  - job: ProvisioningAppService
    displayName: Provisioning AppService
    steps:
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'default'
    #     sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo apt-get install unzip -y
          sudo apt-get install zip -y
          sudo apt update -y || true
          sudo apt install default-jdk -y
          ls /home/ladadmin/_work/ || true
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.7.5'
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform Init
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     backendServiceArm: 'nghiaConnection'
    #     backendAzureRmResourceGroupName: 'Azuredevops'
    #     backendAzureRmStorageAccountName: 'nghiaaccount'
    #     backendAzureRmContainerName: 'terraform-state'
    #     backendAzureRmKey: 'ensuring-quality-releases.tfstate'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform Plan
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'plan'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #     environmentServiceNameAzureRM: 'nghiaConnection'
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform Validate and Apply  
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #     environmentServiceNameAzureRM: 'nghiaConnection'

- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool:
      name: MyPool
    steps:
    #Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
      artifact: selenium

- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      name: MyPool
    environment: 'WAP-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'nghiaConnection'
              appType: 'webApp'
              appName: 'WAS-EQR'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
              
- stage: UITests
  displayName: UI Tests
  jobs:
  - deployment: VMRunUITests
    displayName: Run UI Tests
    environment:
      name:  'VM-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium'
            artifact: selenium
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                rm -rf /var/logs || true
                sudo mkdir /var/logs
                python3 --version
                pip install selenium
                # pip3 uninstall selenium -y || true
                # pip3 install -r requirements.txt
                python3 uitests.py > ui-logs.log
                cat ui-logs.log
                sudo mv ui-logs.log /var/logs

- stage: IntegrationTests
  displayName: Integration Tests
  jobs:
  - job: PostmanTests
    displayName: PostmanTests
    steps: 
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install -g newman@5.2.3'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Regression Tests
      inputs:
        script: 'newman run automatedtesting/postman/RegressionTestSuite.json -e automatedtesting/postman/RegressionTestSuite.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      inputs:
        script: 'newman run automatedtesting/postman/DataValidationTestSuite.json -e automatedtesting/postman/DataValidationTestSuite.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      inputs:
        script: 'ls'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Test Reports
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

- stage: JMeterTests
  displayName: JMeter Tests
  jobs:
  - job: JMeterTests
    displayName: JMeterTests
    steps: 
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.2.1'
    - task: Bash@3
      displayName: EnduranceTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport'
    - task: Bash@3
      displayName: StressTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -e -o automatedtesting/jmeter/stressreport'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'automatedtesting/jmeter'
        ArtifactName: 'jmeter'
        publishLocation: 'Container'